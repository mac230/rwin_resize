;; functions for creating, formatting, and manipulating PCR tables

(defun pcr_reactions_table ()
  "Insert and format a PCR reactions table."
  (interactive)
  (let* ((rxns (read-number "N. Reactions:"))
         (tubes (* rxns 2))
         (r-count rxns)
         (fragments)
         (new-fragments '())
         (rows (format "%s" (+ 2 (* 2 rxns))))
         (ret-point))
    (pcr-master-mix-table tubes)
    (insert (concat "\n\n\n#+NAME: " (format-time-string "%Y.%m.%d") "_PCR_reactions_table\n"))
    (org-table-create (concat "9x" rows))
    (org-table-analyze)

    ;; while loop builds the list of fragment names
    (while (> rxns 0)
      (global-data-entry-mode -1)
      (setq fragments (cons (read-string "Fragment name: ") fragments))
      (setq fragments (cons "" fragments)
            rxns (1- rxns)))
    
    (org-table-goto-field "@1$1")
    (push-mark)
    (end-of-line)
    (delete-region (point) (mark))
    (beginning-of-line)
    (forward-char 1)
    (insert "-\n| N | Fragment | OFA | Sequence | fwd/rev | T_a (°C) | T_ext (sec) | Prod. Size (bp) | yield (ng/μl)")
    (org-cycle)
    (goto-char (org-table-end))
    (insert "#+TBLFM: $1 = @# - 1::$3 = OFA0::$5 = @# % 2 = 0 ? fwd : rev")
    (org-ctrl-c-ctrl-c)
    (previous-line)
    (beginning-of-line)
    (forward-char 1)
    (insert "-")
    (org-ctrl-c-ctrl-c)
    (goto-char (org-table-begin))
    (let ((count 11))

      ;; put the cursor in the correct posn. based on table dimensions 
      (while (> count 0)
        (org-cycle)
        (setq count (1- count))))

    (setq ret-point (point))
    (insert-rectangle (reverse fragments))
    (goto-char ret-point)
    (pcr-table-h-lines r-count)
    (org-cycle)
    (goto-char (org-table-end))
    (dolist (test fragments)
      (when (not (string= test ""))
        (setq new-fragments (cons test new-fragments))))
    (pcr-tubes-table (reverse new-fragments))
    (goto-char ret-point)
    (org-cycle)))


;; -----
(defun pcr-table-h-lines (reactions)
  "Add horizontal lines to demarcate reactions in a PCR table"
  (let ((beg (org-table-begin))
        (end (org-table-end))
        (count 0)
        (curr-number))
    (goto-char beg)
    (while (and
            (< (point) end)
            (< count (* 2 reactions)))
      (when      
          (re-search-forward "^| +[[:digit:]]\\{1,2\\}" end t)
        (setq curr-number (number-at-point)
              count (+ 1 count))
        (when (= 0 (% curr-number 2))
          (org-ctrl-c-ret)))
      (setq end (save-excursion (goto-char (org-table-end)) (previous-line 3) (point)))
      (forward-char 1))
    ))



;; -----
(defun assembly-table ()
"Insert a table and calculate fragment amounts for an assembly reaction"
(interactive)
(insert (concat "#+NAME: " (format-time-string "%Y.%m.%d") "_Assembly_Table"))
(newline)
(let* ((n-frags (read-number "number of fragments: "))
       (f-list '()))
  (org-table-create (concat "6x" (format "%s" (1+ n-frags))))
  (push-mark)
  (end-of-line)
  (delete-region (point) (mark))
  (insert "| N | Component | Concentration (ng/μl) | Fragment Size (bp) | ng/0.1 pmole | Volume (μl) |")
  (org-ctrl-c-ctrl-c)
  (next-line)
  (org-metaup)
  (next-line)
  (org-ctrl-c-ret)
  (goto-char (org-table-end))
  (insert "|-\n| \n|-")
  (org-ctrl-c-ctrl-c)
  (goto-char (org-table-end))
  (insert "#+TBLFM: $1 = @# - 1::$5 = (0.1 * $4 * 650)/1000;%.1f::$6 = $5/$3;%.2f\n")
  (insert "#+TBLFM: @>$>> = Total::@>$> = vsum(@2..@>>);%.2f")
  (previous-line 3)
  (org-table-analyze)
  (org-table-goto-field "@2$2")
  (dotimes (var n-frags)
    (setq f-list (cons (read-string "fragment: ") f-list)))
  (setq f-list (reverse f-list))
  (insert-rectangle f-list)
  (org-table-goto-field "@2$3")
  (org-ctrl-c-ctrl-c)
  ))


;; -----
(defun pcr-master-mix-table (n-rxns)
  "Insert a table with amounts to make a master mix based on 'n' reactions."
  (interactive)
  (insert (concat "#+NAME: " (format-time-string "%Y.%m.%d") "_Mix_Table\n"))
  (org-table-create "4x9")
  (push-mark)
  (end-of-line)
  (delete-region (point) (mark))
  (insert (concat "| N | Component | 1_rxn | " (number-to-string n-rxns) "_rxns"))
  (org-table-analyze)
  (org-table-goto-field "@2$2")
  (insert-rectangle
   (mapcar
    (lambda (arg) (format "%s" arg))
    (list 'UPW 'HF 'dNTP 'fwd 'rev 'DNA 'phusion 'Total)))
  (org-ctrl-c-ctrl-c)
  (org-table-goto-field "@2$3")
  (insert-rectangle
   (mapcar
    (lambda (arg) (format "%s" arg))
    (list '32.5 '10 '1 2.5 '2.5 '1 '0.5 '50.0)))
  (org-table-goto-field "@1$1")
  (org-open-line 1)
  (beginning-of-line)
  (forward-char 1)
  (insert "-")
  (org-table-goto-field "@8$2")
  (org-ctrl-c-ret)
  (end-of-line)
  (insert "\n|-")
  (org-ctrl-c-ctrl-c)
  (end-of-line)
  (insert "\n#+TBLFM: $1 = @# - 1::@>$2 = Total")
  (org-ctrl-c-ctrl-c)
  (end-of-line)
  (insert (concat "\n#+TBLFM: @>$3 = vsum(@2..@>>);%.1f::$4 = $3 * " (format "%s" n-rxns) ".1;%.2f"))
  (org-ctrl-c-ctrl-c)
  )


;; -----
(defun pcr-tubes-table (fragments)
"Create a table of tubes for a series of PCR reactions"
  (insert (concat "\n\n#+NAME: " (format-time-string "%Y.%m.%d") "_Tubes_Table"))
  (let* ((rows (1+ (* 2 (length fragments))))
         (frag-list '()))
    (org-table-create (concat "3x" (number-to-string rows)))
    (forward-line 1)
    (org-table-analyze)
    (org-table-goto-field "@1$1")
    (push-mark)
    (end-of-line)
    (delete-region (point) (mark))
    (insert "N | Fragment | Template |")
    (beginning-of-line)
    (org-ctrl-c-ctrl-c)
    (org-ctrl-c-ret)
    (goto-char (org-table-end))
    (insert "|-")
    (org-ctrl-c-ctrl-c)
    (end-of-line)
    (insert "\n#+TBLFM: $1 =  @# - 1::$3 = $1 % 2 = 0 ? no : yes")
    (org-ctrl-c-ctrl-c)
    (dolist (frag fragments)
      (setq frag-list (cons frag (cons frag frag-list))))
    (org-table-goto-field "@2$2")
    (insert-rectangle frag-list)
    (org-ctrl-c-ctrl-c)))
    
